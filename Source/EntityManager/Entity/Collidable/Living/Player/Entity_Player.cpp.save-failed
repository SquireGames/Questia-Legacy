#include <iostream>

#include "EntityManager/Entity/Collidable/Living/Player/Entity_Player.h"

Entity_Player::Entity_Player(sf::Vector2f coordinates):
    coordinates(coordinates.x-12.5,coordinates.y-12.5)
    , sideRadius(12.5, 12.5)
    , velocity(2.f, 2.f)
    , hp(100)
    , mp(50)
    , stamina(50.f)
    , mIsMovingUp(false)
    , mIsMovingDown(false)
    , mIsMovingLeft(false)
    , mIsMovingRight(false)
{
    if(!entityTexture_up.loadFromFile("Media/Image/Player/player_up.png")) {}
    if(!entityTexture_upRight.loadFromFile("Media/Image/Player/player_upRight.png")) {}
    if(!entityTexture_upLeft.loadFromFile("Media/Image/Player/player_upLeft.png")) {}
    if(!entityTexture_left.loadFromFile("Media/Image/Player/player_left.png")) {}
    if(!entityTexture_right.loadFromFile("Media/Image/Player/player_right.png")) {}
    if(!entityTexture_down.loadFromFile("Media/Image/Player/player_down.png")) {}
    if(!entityTexture_downLeft.loadFromFile("Media/Image/Player/player_downLeft.png")) {}
    if(!entityTexture_downRight.loadFromFile("Media/Image/Player/player_downRight.png")) {}

    entitySprite.setTexture(entityTexture_up);
    entitySprite.setPosition(coordinates);
}

Entity_Player::~Entity_Player()
{

}

void Entity_Player::drawEntity(sf::RenderWindow &window)
{
    entitySprite.setPosition(coordinates.x, coordinates.y);
    window.draw(entitySprite);
}

void Entity_Player::handleImput(sf::Keyboard::Key key, bool isPressed)
{
    if(key == sf::Keyboard::W || key == sf::Keyboard::Up)
    {
        mIsMovingUp = isPressed;
    }
    if(key == sf::Keyboard::S || key == sf::Keyboard::Down)
    {
        mIsMovingDown = isPressed;
    }
    if(key == sf::Keyboard::A || key == sf::Keyboard::Left)
    {
        mIsMovingLeft = isPressed;
    }
    if(key == sf::Keyboard::D || key == sf::Keyboard::Right)
    {
        mIsMovingRight = isPressed;
    }

    if(key == sf::Keyboard::LShift)
    {
        shiftIsPressed = isPressed;
    }
}

sf::Vector2f Entity_Player::getSideRadius()
{
    return sideRadius;
}

void Entity_Player::update(int effect, int (&returnCollision)[4])
{
    // Collision
    {
        if(returnCollision[0] == 0 && mIsMovingUp)
        {
            coordinates.y = coordinates.y - velocity.y;
        }
        if(returnCollision[2] == 0 && mIsMovingDown)
        {
            coordinates.y = coordinates.y + velocity.y;
        }
        if(returnCollision[3] == 0 && mIsMovingLeft)
        {
            coordinates.x = coordinates.x - velocity.x;
        }
        if(returnCollision[1] == 0 && mIsMovingRight)
        {
            coordinates.x = coordinates.x + velocity.x;
        }
    }

    // Sprite

    if(mIsMovingUp && !mIsMovingDown)
    {
        if(!mIsMovingLeft && !mIsMovingRight)
        {
            entitySprite.setTexture(entityTexture_up);
        }
        else
        {
            if(mIsMovingLeft)
            {
                entitySprite.setTexture(entityTexture_upLeft);
            }
            else if (mIsMovingRight)
            {
                entitySprite.setTexture(entityTexture_upRight);
            }
        }
    }
    else if(mIsMovingDown && !mIsMovingUp)
    {
        if(!mIsMovingLeft&&!mIsMovingRight)
        {
            entitySprite.setTexture(entityTexture_down);
        }
        else
        {
            if(mIsMovingLeft)
            {
                entitySprite.setTexture(entityTexture_downLeft);
            }
            else if (mIsMovingRight)
            {
                entitySprite.setTexture(entityTexture_downRight);
            }
        }
    }
    else
    {
        if(mIsMovingLeft)
        {
            entitySprite.setTexture(entityTexture_left);
        }
        else if (mIsMovingRight)
        {
            entitySprite.setTexture(entityTexture_right);
        }
    }

    // Stamina
    if(shiftIsPressed && stamina > 0.1)
    {
        velocity = sf::Vector2f(3.f, 3.f);
        stamina = stamina - 0.5;
    }
    if(!shiftIsPressed && stamina < 50)
    {
        velocity = sf::Vector2f(1.5, 1.5);
        stamina = stamina + 0.1;
    }
}



sf::Vector2f Entity_Player::getVelocity()
{
    return velocity;
}

sf::Vector2f Entity_Player::returnCoordinates()
{
    return coordinates;
}

sf::Vector3f Entity_Player::getStats()
{
    return sf::Vector3f((int)hp,(int) mp,(int) stamina);
}
